#!/usr/bin/env python
from fabric.api import *
from fabric.colors import blue
from fabric.contrib.files import exists

env.user          = 'masterbuilder'
env.host_string   = 'technicmocs.created.today'
env.output_prefix = False
project_name      = 'technicmocs'
project_dir       = '/srv/' + project_name

def deploy():
    '''
    The deploy() function contains all the steps to turn a vanilla
    Debian/Ubuntu installation into a Lamernews server.
    '''

    inform('Creating project directory...')
    if not exists(project_dir):
        sudo('mkdir -p %s' % project_dir)
        sudo('chown %s %s' % (env.user, project_dir))

    inform('Getting the necessary packages...')
    apt_install('build-essential python-minimal tcl git nginx curl')

    inform('Installing Ruby with ruby-install')
    github('postmodern', 'ruby-install')
    if not exists('%s/ruby/bin/ruby' % project_dir):
        with cd('%s/ruby-install' % project_dir):
            run('git checkout v0.5.0')
            sudo('make install')
        run('ruby-install -i %s/ruby ruby 1.9.3' % project_dir)

    inform('Installing Redis data structure server...')
    github('antirez', 'redis')
    if not exists('/usr/local/bin/redis-server'):
        with cd('%s/redis' % project_dir):
            run('git checkout 3.0.1')
            run('make')
            sudo('make install')
    if command_fails('id -u redis'):
        sudo('adduser --system --group --home /var/local/lib/redis redis')
    put('redis.service', '/etc/systemd/system/redis.service', use_sudo=True)
    put('redis.conf', '/etc/redis.conf', use_sudo=True)
    sudo('systemctl daemon-reload')
    sudo('systemctl enable redis')
    sudo('systemctl start redis')

    inform('Installing the Lamernews app...')
    github('antirez', 'lamernews')
    gem_install('bundler')
    with cd('%s/lamernews' % project_dir):
        put('app_config.rb', 'app_config.rb')
        if not exists('lamernews.patch'):
            put('lamernews.patch', 'lamernews.patch')
            run('git apply lamernews.patch')
        rubyrun('bundle install')

    inform('Installing uwsgi application container...')
    gem_install('uwsgi')
    sudo('find %s/gems -name uwsgi.ruby -exec cp -f {} /usr/local/bin/uwsgi \;' % project_dir)
    sudo('mkdir -p /etc/uwsgi.d')
    put('uwsgi.ini', '/etc/uwsgi.d/%s.ini' % project_name, use_sudo=True)
    put('uwsgi.service', '/etc/systemd/system/uwsgi.service', use_sudo=True)
    sudo('systemctl daemon-reload')
    sudo('systemctl enable uwsgi')
    sudo('systemctl start uwsgi')

    inform('Configuring nginx web server')
    put('nginx.conf', '/etc/nginx/sites-enabled/%s' % project_name, use_sudo=True)
    sudo('systemctl reload nginx')

    inform('Deployment succeeded!')

def apt_install(packages):
    '''
    Runs `apt-get install` if any of the packages is not installed yet
    '''
    if command_fails('dpkg -s %s' % packages):
        sudo('apt-get update', pty=False)
        sudo('apt-get install %s' % packages, pty=False)

def gem_install(packages):
    '''
    Runs `gem install` for each package that's not installed already
    '''
    packages = packages.split(' ')
    for package in packages:
        with settings(hide('warnings'), warn_only=True):
            needed = rubyrun('gem list -i %s' % package).failed
        if needed:
            rubyrun('gem install --no-ri --no-rdoc %s' % package)

def github(user, repo):
    '''
    Clones a Github repo into the project directory
    '''
    with cd(project_dir):
        if not exists(repo):
            run('git clone https://github.com/%s/%s' % (user, repo), pty=False)

def rubyrun(command):
    '''
    Runs a command with the correct GEM_HOME and PATH environment variables
    '''
    rubydir = '%s/ruby' % project_dir
    gemdir = '%s/gems' % project_dir
    with shell_env(GEM_HOME=gemdir), path('%s/bin:%s/bin' % (rubydir, gemdir), behavior='prepend'):
        return run(command)

def command_fails(command):
    '''
    Returns the exit status of a command as a Boolean
    '''
    with settings(hide('everything'), warn_only=True):
        return run(command).failed

def inform(text):
    '''
    Prints an informational message
    '''
    puts('')
    puts(blue(text, bold=True))

# Run deploy() when called from the command line:
if __name__ == '__main__':
    deploy()
